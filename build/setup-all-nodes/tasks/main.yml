---
- name: Synchronize a directory to the remote server
  synchronize:
    src: /Users/obinna/Desktop/IU/DEVOP/webapp
    dest: /home/ubuntu
    delete: yes  # Optional: delete files in the destination that are not in the source


# - name: Update the apt package index
#   apt:
#     update_cache: yes

- name: Install prerequisites for Docker
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    state: present

- name: Add Docker's official GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker's APT repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    
    state: present

# - name: Update the apt package index again
#   apt:
#     update_cache: yes

- name: Install Docker
  apt:
    name: docker-ce
    state: present

#

- name: Ensure Docker is installed
  ansible.builtin.package:
    name: docker-ce
    state: present

- name: Start Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Install Ansible
  apt:
    name: ansible
    state: present

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes


- name: Check if Dockerfile is present
  ansible.builtin.stat:
    path: "{{ dockerfile_path }}/Dockerfile"
  register: dockerfile_stat

- name: Fail if Dockerfile is not present
  ansible.builtin.fail:
    msg: "Dockerfile not found in the specified path"
  when: not dockerfile_stat.stat.exists


- name: Build Docker image
  community.docker.docker_image:
    source: build
    build:
      path: "{{ dockerfile_path }}"
    name: "{{ docker_username }}/{{ image_name }}"
    tag: "{{ image_tag }}"
  when: dockerfile_stat.stat.exists

- name: Log in to Docker Hub
  community.docker.docker_login:
    username: "{{ docker_username }}"
    password: "{{ docker_password }}"
    reauthorize: yes
  register: login_result



- name: Push Docker image to Docker Hub
  community.docker.docker_image:
    name: "{{ docker_username }}/{{ image_name }}"
    tag: "{{ image_tag }}"
    push: yes
    source: local
  when: dockerfile_stat.stat.exists

- name: Ensure a Docker container is running
  docker_container:
    name: webapp419
    image: "{{ docker_username }}/{{ image_name }}"
    state: started
    ports:
      - "3000:3000"
    restart_policy: always

- name: Add kubernetes key
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: B53DC80D13EDEF05
    state: present
 

# xenial is always used, because bionic repo doesn't exist yet
- name: Add kubernetes repo
  apt_repository:
    repo: deb http://mirror.reenigne.net/apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes
 #

# - name: Add Kubernetes apt-key
#   apt_key:
#     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
#     state: present

# - name: Add Kubernetes apt repository
#   apt_repository:
#     repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
#     state: present



- name: Install kubelet, kubeadm, kubectl, firewalld
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
      - firewalld
    state: present
    update_cache: yes

- name: Starting and Enabling the required services
  service:
   name: "{{ item }}"
   state: started
   enabled: yes
  with_items: "{{ services }}"

- name: Allow Network Ports in Firewalld
  firewalld:
    port: "{{ item }}"
    state: enabled
    permanent: yes
    immediate: yes
  with_items: "{{ ports }}"

- name: Enabling Bridge Firewall Rule
  shell: "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"