---


- name: Synchronize a directory to the remote server
  synchronize:
    src: /Users/obinna/Desktop/IU/DEVOP/webapp
    dest: /home/ubuntu
    delete: yes  # Optional: delete files in the destination that are not in the source


- name: Update the apt package index
  apt:
    update_cache: yes

- name: Install prerequisites for Docker
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
    state: present

- name: Add Docker's official GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker's APT repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Update the apt package index again
  apt:
    update_cache: yes

- name: Install Docker
  apt:
    name: docker-ce
    state: present

- name: Ensure Docker is installed
  ansible.builtin.package:
    name: docker-ce
    state: present

- name: Install Ansible
  apt:
    name: ansible
    state: present

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Check if Dockerfile is present
  ansible.builtin.stat:
    path: "{{ dockerfile_path }}/Dockerfile"
    register: dockerfile_stat

- name: Fail if Dockerfile is not present
  ansible.builtin.fail:
    msg: "Dockerfile not found in the specified path"
    when: not dockerfile_stat.stat.exists

- name: Build Docker image
  community.docker.docker_image:
    build:
      path: "{{ dockerfile_path }}"
      name: mychoice
      tag: latest
      when: dockerfile_stat.stat.exists
# - name: Check if Dockerfile is present
#   ansible.builtin.stat:
#     path: "{{ dockerfile_path }}/Dockerfile"
#     register: dockerfile_stat

# - name: Fail if Dockerfile is not present
#   ansible.builtin.fail:
#     msg: "Dockerfile not found in the specified path"
#     when: not dockerfile_stat.stat.exists

# - name: Build Docker image
#   community.docker.docker_image:
#     path: "{{ dockerfile_path }}"
#     name: mychoice
#     tag: latest
#     when: dockerfile_stat.stat.exists


 
  